name: CI

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Run tests
        run: |
          pytest --cov=app --cov-report=xml
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Extract metadata
        id: meta
        run: |
          IMAGE_TAG="${GITHUB_SHA::7}-${GITHUB_RUN_NUMBER}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> "$GITHUB_OUTPUT"
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG}" >> "$GITHUB_OUTPUT"
      - name: Build and push image
        env:
          IMAGE_URI: ${{ steps.meta.outputs.IMAGE_URI }}
        run: |
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
      - name: Update Lambda function
        run: |
          aws lambda update-function-code \
            --function-name "${{ secrets.LAMBDA_FUNCTION_NAME }}" \
            --image-uri "${{ steps.meta.outputs.IMAGE_URI }}"
